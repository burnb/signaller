// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package entities

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson1339d61cDecodeGithubComBurnbSignallerInternalRepositoryEntities(in *jlexer.Lexer, out *Trader) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "encryptedUid":
			out.EncryptedUid = string(in.String())
		case "nickName":
			out.NickName = string(in.String())
		case "userPhotoUrl":
			out.UserPhotoUrl = string(in.String())
		case "followerCount":
			out.FollowerCount = int64(in.Int64())
		case "pnlValue":
			out.PnlValue = float64(in.Float64())
		case "roiValue":
			out.RoiValue = float64(in.Float64())
		case "weeklyRoi":
			out.WeeklyRoi = float64(in.Float64())
		case "weeklyPnl":
			out.WeeklyPnl = float64(in.Float64())
		case "monthlyRoi":
			out.MonthlyRoi = float64(in.Float64())
		case "monthlyPnl":
			out.MonthlyPnl = float64(in.Float64())
		case "yearlyRoi":
			out.YearlyRoi = float64(in.Float64())
		case "yearlyPnl":
			out.YearlyPnl = float64(in.Float64())
		case "Rank":
			out.Rank = int(in.Int())
		case "positionShared":
			out.PositionShared = bool(in.Bool())
		case "deliveryPositionShared":
			out.DeliveryPositionShared = bool(in.Bool())
		case "LastUpdate":
			out.LastUpdate = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1339d61cEncodeGithubComBurnbSignallerInternalRepositoryEntities(out *jwriter.Writer, in Trader) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"encryptedUid\":"
		out.RawString(prefix[1:])
		out.String(string(in.EncryptedUid))
	}
	{
		const prefix string = ",\"nickName\":"
		out.RawString(prefix)
		out.String(string(in.NickName))
	}
	{
		const prefix string = ",\"userPhotoUrl\":"
		out.RawString(prefix)
		out.String(string(in.UserPhotoUrl))
	}
	{
		const prefix string = ",\"followerCount\":"
		out.RawString(prefix)
		out.Int64(int64(in.FollowerCount))
	}
	{
		const prefix string = ",\"pnlValue\":"
		out.RawString(prefix)
		out.Float64(float64(in.PnlValue))
	}
	{
		const prefix string = ",\"roiValue\":"
		out.RawString(prefix)
		out.Float64(float64(in.RoiValue))
	}
	{
		const prefix string = ",\"weeklyRoi\":"
		out.RawString(prefix)
		out.Float64(float64(in.WeeklyRoi))
	}
	{
		const prefix string = ",\"weeklyPnl\":"
		out.RawString(prefix)
		out.Float64(float64(in.WeeklyPnl))
	}
	{
		const prefix string = ",\"monthlyRoi\":"
		out.RawString(prefix)
		out.Float64(float64(in.MonthlyRoi))
	}
	{
		const prefix string = ",\"monthlyPnl\":"
		out.RawString(prefix)
		out.Float64(float64(in.MonthlyPnl))
	}
	{
		const prefix string = ",\"yearlyRoi\":"
		out.RawString(prefix)
		out.Float64(float64(in.YearlyRoi))
	}
	{
		const prefix string = ",\"yearlyPnl\":"
		out.RawString(prefix)
		out.Float64(float64(in.YearlyPnl))
	}
	{
		const prefix string = ",\"Rank\":"
		out.RawString(prefix)
		out.Int(int(in.Rank))
	}
	{
		const prefix string = ",\"positionShared\":"
		out.RawString(prefix)
		out.Bool(bool(in.PositionShared))
	}
	{
		const prefix string = ",\"deliveryPositionShared\":"
		out.RawString(prefix)
		out.Bool(bool(in.DeliveryPositionShared))
	}
	{
		const prefix string = ",\"LastUpdate\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastUpdate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Trader) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1339d61cEncodeGithubComBurnbSignallerInternalRepositoryEntities(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Trader) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1339d61cEncodeGithubComBurnbSignallerInternalRepositoryEntities(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Trader) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1339d61cDecodeGithubComBurnbSignallerInternalRepositoryEntities(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Trader) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1339d61cDecodeGithubComBurnbSignallerInternalRepositoryEntities(l, v)
}
