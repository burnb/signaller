// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package entities

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE0c3566dDecodeGithubComBurnbSignallerInternalRepositoryEntities(in *jlexer.Lexer, out *Position) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = int64(in.Int64())
		case "uid":
			out.UserId = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "entryPrice":
			out.EntryPrice = float64(in.Float64())
		case "markPrice":
			out.MarkPrice = float64(in.Float64())
		case "pnl":
			out.Pnl = float64(in.Float64())
		case "roe":
			out.Roe = float64(in.Float64())
		case "amount":
			out.Amount = float64(in.Float64())
		case "leverage":
			out.Leverage = uint8(in.Uint8())
		case "Invested":
			out.Invested = float64(in.Float64())
		case "Opened":
			out.Opened = bool(in.Bool())
		case "Long":
			out.Long = bool(in.Bool())
		case "createTimestamp":
			out.CreateTimestamp = int64(in.Int64())
		case "updateTimestamp":
			out.UpdateTimestamp = int64(in.Int64())
		case "closedTimestamp":
			if in.IsNull() {
				in.Skip()
				out.ClosedTimestamp = nil
			} else {
				if out.ClosedTimestamp == nil {
					out.ClosedTimestamp = new(int64)
				}
				*out.ClosedTimestamp = int64(in.Int64())
			}
		case "Exchange":
			out.Exchange = string(in.String())
		case "MarginMode":
			out.MarginMode = string(in.String())
		case "Hedged":
			out.Hedged = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE0c3566dEncodeGithubComBurnbSignallerInternalRepositoryEntities(out *jwriter.Writer, in Position) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Id))
	}
	{
		const prefix string = ",\"uid\":"
		out.RawString(prefix)
		out.String(string(in.UserId))
	}
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"entryPrice\":"
		out.RawString(prefix)
		out.Float64(float64(in.EntryPrice))
	}
	{
		const prefix string = ",\"markPrice\":"
		out.RawString(prefix)
		out.Float64(float64(in.MarkPrice))
	}
	{
		const prefix string = ",\"pnl\":"
		out.RawString(prefix)
		out.Float64(float64(in.Pnl))
	}
	{
		const prefix string = ",\"roe\":"
		out.RawString(prefix)
		out.Float64(float64(in.Roe))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Float64(float64(in.Amount))
	}
	{
		const prefix string = ",\"leverage\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Leverage))
	}
	{
		const prefix string = ",\"Invested\":"
		out.RawString(prefix)
		out.Float64(float64(in.Invested))
	}
	{
		const prefix string = ",\"Opened\":"
		out.RawString(prefix)
		out.Bool(bool(in.Opened))
	}
	{
		const prefix string = ",\"Long\":"
		out.RawString(prefix)
		out.Bool(bool(in.Long))
	}
	{
		const prefix string = ",\"createTimestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.CreateTimestamp))
	}
	{
		const prefix string = ",\"updateTimestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.UpdateTimestamp))
	}
	{
		const prefix string = ",\"closedTimestamp\":"
		out.RawString(prefix)
		if in.ClosedTimestamp == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.ClosedTimestamp))
		}
	}
	{
		const prefix string = ",\"Exchange\":"
		out.RawString(prefix)
		out.String(string(in.Exchange))
	}
	{
		const prefix string = ",\"MarginMode\":"
		out.RawString(prefix)
		out.String(string(in.MarginMode))
	}
	{
		const prefix string = ",\"Hedged\":"
		out.RawString(prefix)
		out.Bool(bool(in.Hedged))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Position) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE0c3566dEncodeGithubComBurnbSignallerInternalRepositoryEntities(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Position) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE0c3566dEncodeGithubComBurnbSignallerInternalRepositoryEntities(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Position) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE0c3566dDecodeGithubComBurnbSignallerInternalRepositoryEntities(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Position) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE0c3566dDecodeGithubComBurnbSignallerInternalRepositoryEntities(l, v)
}
