// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package binance

import (
	json "encoding/json"
	entities "github.com/burnb/signaller/internal/repository/entities"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6a975c40DecodeGithubComBurnbSignallerPkgExchangeClientsBinance(in *jlexer.Lexer, out *TraderResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "messageDetail":
			out.MessageDetail = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]*entities.Trader, 0, 8)
					} else {
						out.Data = []*entities.Trader{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *entities.Trader
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(entities.Trader)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Data = append(out.Data, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "success":
			out.Success = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComBurnbSignallerPkgExchangeClientsBinance(out *jwriter.Writer, in TraderResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"messageDetail\":"
		out.RawString(prefix)
		out.String(string(in.MessageDetail))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Data {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"success\":"
		out.RawString(prefix)
		out.Bool(bool(in.Success))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TraderResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComBurnbSignallerPkgExchangeClientsBinance(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TraderResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComBurnbSignallerPkgExchangeClientsBinance(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TraderResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComBurnbSignallerPkgExchangeClientsBinance(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TraderResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComBurnbSignallerPkgExchangeClientsBinance(l, v)
}
func easyjson6a975c40DecodeGithubComBurnbSignallerPkgExchangeClientsBinance1(in *jlexer.Lexer, out *StatsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "messageDetail":
			out.MessageDetail = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]*Stats, 0, 8)
					} else {
						out.Data = []*Stats{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *Stats
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(Stats)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Data = append(out.Data, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "success":
			out.Success = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComBurnbSignallerPkgExchangeClientsBinance1(out *jwriter.Writer, in StatsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"messageDetail\":"
		out.RawString(prefix)
		out.String(string(in.MessageDetail))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Data {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"success\":"
		out.RawString(prefix)
		out.Bool(bool(in.Success))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StatsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComBurnbSignallerPkgExchangeClientsBinance1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StatsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComBurnbSignallerPkgExchangeClientsBinance1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StatsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComBurnbSignallerPkgExchangeClientsBinance1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StatsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComBurnbSignallerPkgExchangeClientsBinance1(l, v)
}
func easyjson6a975c40DecodeGithubComBurnbSignallerPkgExchangeClientsBinance2(in *jlexer.Lexer, out *Stats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "periodType":
			out.PeriodType = string(in.String())
		case "statisticsType":
			out.StatisticsType = string(in.String())
		case "value":
			out.Value = float64(in.Float64())
		case "rank":
			out.Rank = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComBurnbSignallerPkgExchangeClientsBinance2(out *jwriter.Writer, in Stats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"periodType\":"
		out.RawString(prefix[1:])
		out.String(string(in.PeriodType))
	}
	{
		const prefix string = ",\"statisticsType\":"
		out.RawString(prefix)
		out.String(string(in.StatisticsType))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.Float64(float64(in.Value))
	}
	{
		const prefix string = ",\"rank\":"
		out.RawString(prefix)
		out.Int(int(in.Rank))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Stats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComBurnbSignallerPkgExchangeClientsBinance2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Stats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComBurnbSignallerPkgExchangeClientsBinance2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Stats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComBurnbSignallerPkgExchangeClientsBinance2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Stats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComBurnbSignallerPkgExchangeClientsBinance2(l, v)
}
func easyjson6a975c40DecodeGithubComBurnbSignallerPkgExchangeClientsBinance3(in *jlexer.Lexer, out *PositionsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "messageDetail":
			out.MessageDetail = string(in.String())
		case "data":
			easyjson6a975c40Decode(in, &out.Data)
		case "success":
			out.Success = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComBurnbSignallerPkgExchangeClientsBinance3(out *jwriter.Writer, in PositionsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"messageDetail\":"
		out.RawString(prefix)
		out.String(string(in.MessageDetail))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		easyjson6a975c40Encode(out, in.Data)
	}
	{
		const prefix string = ",\"success\":"
		out.RawString(prefix)
		out.Bool(bool(in.Success))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PositionsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComBurnbSignallerPkgExchangeClientsBinance3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PositionsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComBurnbSignallerPkgExchangeClientsBinance3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PositionsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComBurnbSignallerPkgExchangeClientsBinance3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PositionsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComBurnbSignallerPkgExchangeClientsBinance3(l, v)
}
func easyjson6a975c40Decode(in *jlexer.Lexer, out *struct {
	OtherPositionRetList []*entities.Position `json:"otherPositionRetList"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "otherPositionRetList":
			if in.IsNull() {
				in.Skip()
				out.OtherPositionRetList = nil
			} else {
				in.Delim('[')
				if out.OtherPositionRetList == nil {
					if !in.IsDelim(']') {
						out.OtherPositionRetList = make([]*entities.Position, 0, 8)
					} else {
						out.OtherPositionRetList = []*entities.Position{}
					}
				} else {
					out.OtherPositionRetList = (out.OtherPositionRetList)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *entities.Position
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(entities.Position)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					out.OtherPositionRetList = append(out.OtherPositionRetList, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40Encode(out *jwriter.Writer, in struct {
	OtherPositionRetList []*entities.Position `json:"otherPositionRetList"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"otherPositionRetList\":"
		out.RawString(prefix[1:])
		if in.OtherPositionRetList == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.OtherPositionRetList {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					(*v9).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson6a975c40DecodeGithubComBurnbSignallerPkgExchangeClientsBinance4(in *jlexer.Lexer, out *BaseInfoResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "messageDetail":
			out.MessageDetail = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				if out.Data == nil {
					out.Data = new(BaseInfo)
				}
				(*out.Data).UnmarshalEasyJSON(in)
			}
		case "success":
			out.Success = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComBurnbSignallerPkgExchangeClientsBinance4(out *jwriter.Writer, in BaseInfoResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"messageDetail\":"
		out.RawString(prefix)
		out.String(string(in.MessageDetail))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil {
			out.RawString("null")
		} else {
			(*in.Data).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"success\":"
		out.RawString(prefix)
		out.Bool(bool(in.Success))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BaseInfoResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComBurnbSignallerPkgExchangeClientsBinance4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BaseInfoResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComBurnbSignallerPkgExchangeClientsBinance4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BaseInfoResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComBurnbSignallerPkgExchangeClientsBinance4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BaseInfoResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComBurnbSignallerPkgExchangeClientsBinance4(l, v)
}
func easyjson6a975c40DecodeGithubComBurnbSignallerPkgExchangeClientsBinance5(in *jlexer.Lexer, out *BaseInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "deliveryPositionShared":
			out.DeliveryPositionShared = bool(in.Bool())
		case "followerCount":
			out.FollowerCount = int(in.Int())
		case "followingCount":
			out.FollowingCount = int(in.Int())
		case "introduction":
			out.Introduction = string(in.String())
		case "nickName":
			out.NickName = string(in.String())
		case "positionShared":
			out.PositionShared = bool(in.Bool())
		case "twitterUrl":
			out.TwitterUrl = string(in.String())
		case "userPhotoUrl":
			out.UserPhotoUrl = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComBurnbSignallerPkgExchangeClientsBinance5(out *jwriter.Writer, in BaseInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"deliveryPositionShared\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.DeliveryPositionShared))
	}
	{
		const prefix string = ",\"followerCount\":"
		out.RawString(prefix)
		out.Int(int(in.FollowerCount))
	}
	{
		const prefix string = ",\"followingCount\":"
		out.RawString(prefix)
		out.Int(int(in.FollowingCount))
	}
	{
		const prefix string = ",\"introduction\":"
		out.RawString(prefix)
		out.String(string(in.Introduction))
	}
	{
		const prefix string = ",\"nickName\":"
		out.RawString(prefix)
		out.String(string(in.NickName))
	}
	{
		const prefix string = ",\"positionShared\":"
		out.RawString(prefix)
		out.Bool(bool(in.PositionShared))
	}
	{
		const prefix string = ",\"twitterUrl\":"
		out.RawString(prefix)
		out.String(string(in.TwitterUrl))
	}
	{
		const prefix string = ",\"userPhotoUrl\":"
		out.RawString(prefix)
		out.String(string(in.UserPhotoUrl))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BaseInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComBurnbSignallerPkgExchangeClientsBinance5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BaseInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComBurnbSignallerPkgExchangeClientsBinance5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BaseInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComBurnbSignallerPkgExchangeClientsBinance5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BaseInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComBurnbSignallerPkgExchangeClientsBinance5(l, v)
}
